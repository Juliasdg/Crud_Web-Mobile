"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTable = void 0;
const tslib_1 = require("tslib");
const sort_on_1 = tslib_1.__importDefault(require("sort-on"));
const Measurement_1 = require("./Measurement");
const table = require('markdown-table');
function getSortedResults(results, sortParams) {
    if (!sortParams) {
        return results;
    }
    const sortArr = Array.isArray(sortParams) ? sortParams : [sortParams];
    const sort = sortArr.map((entry) => {
        return entry.order === 'asc' ? entry.field : `-${entry.field}`;
    });
    return sort_on_1.default(results, sort);
}
function generateTable(results, options = {}) {
    const sortedResults = getSortedResults(results, options.sortBy);
    const tableIndex = ['Node', 'Option', 'Msecs/op', 'Ops/sec', 'V8'];
    const tableRows = [tableIndex];
    sortedResults.map((entry) => {
        var _a;
        const measurement = new Measurement_1.Measurement(entry.meanTimeNs);
        const [nodeVersion, v8Version] = entry.runtimeVersion.split(', ');
        const row = [
            nodeVersion,
            entry.benchmarkEntryVersion
                ? `${entry.benchmarkEntryName} ${entry.benchmarkEntryVersion}`
                : entry.benchmarkEntryName,
            measurement.getTextInMsecs((_a = options.precision) !== null && _a !== void 0 ? _a : 3),
            measurement.getTextOpsPerSec(),
            v8Version,
        ];
        tableRows.push(row);
    });
    return table(tableRows);
}
exports.generateTable = generateTable;
//# sourceMappingURL=tableGenerator.js.map